 <form >
                    <Card className="card">
                        <h1><span style={{ color: "blue" }}>F</span>
                            <span style={{ color: "red" }}>u</span>
                            <span style={{ color: "green" }}>n</span>
                            <span style={{ color: "green" }}>d</span>
                            <span style={{ color: "orange" }}>o</span>
                            <span style={{ color: "red" }}>o</span></h1>
                        <h1>Sign In</h1>
                        <p>continue to your fundoo</p>
                        <Snackbar
                            anchorOrigin={{
                                vertical: 'bottom',
                                horizontal: 'center',
                            }}
                            // open={true}
                            open={this.state.openSnackBar}
                            autoHideDuration={6000}
                            onClose={this.snackbarClose}
                            message={<span id="messege-id">{this.state.SnackBarMessage}</span>}
                            action={[
                                <IconButton
                                    key="close"
                                    arial-label="close"
                                    color="inherit"
                                    onClick={this.snackbarClose}
                                >
                                </IconButton>
                            ]}
                        />
                        <div className="emailField">
                            <TextField
                                required
                                id=""
                                label="Email"
                                type="email"
                                name="Email"
                                margin="normal"
                                placeholder="Enter your email"
                                variant="outlined"
                                onChange={this.handleChangeMail}
                                value={this.state.email}
                            />
                            <TextField
                                required
                                id=""
                                type="password"
                                label="Password"
                                name="Password"
                                margin="normal"
                                placeholder="Enter your password"
                                variant="outlined"
                                onChange={this.handleChangePassword}
                                value={this.state.password}
                            />
                        </div>
                        <div className="resetLogin">
                            <Button color="primary" id="sensitivity" onClick={this.handleForgotPassword}>
                                forgot password?
                            </Button>
                        </div>
                        <div className="button">
                            <Button color="primary" id="sensitivity" onClick={this.handleCreate}>
                                Create account
                            </Button>
                            {/* </div>
                        <div className="button"> */}
                            <Button variant="contained" color="primary" className="submit" onClick={this.handleSubmit}>
                                Submit
                            </Button>
                        </div>
                    </Card>
                </form>



                #sensitivity {
  text-transform: none;
}


  .signinCss{
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    align-content: center;
}
/* ---------------------------------------------------Login------------------------------------------------------ */
@media only screen and (min-width: 320px) and (max-width: 375px), only screen and (min-width: 425px) and (max-width:768px), only screen and (min-width: 600px) {
  /* .main {
    margin-top: 100px;
    width: 100%;
    display: flex;
    justify-content: space-evenly;
  } */
  #cardText {
    text-align: center;
  }
  .button {
    margin-left: 600px;
  }
  .outerCard{
    height: 200px;
    max-width: 250px;
  }
}
.App {
  width: 100%;
}
.main {
  margin-top: 100px;
  width: 100%;
  display: flex;
  justify-content: space-evenly;
}
.cards {
  display: flex;
  width: 100%;
    display: flex;
    width: 100%;
    justify-content: center;
}
.innerCard {
  width: 106%;
  height: 94%;
  margin-left: -25%;
  margin-top: -21%;
}
.btnSign{
  margin-left: 550px;}
/* ------------------------------------------------------------------------------------------------------------------ */
.text {
  margin-top: 105px;
  justify-content: space-between;
  border-radius: 25px;
  margin-bottom: 12px;
}

.registerCss {
  background-size: cover;
  text-align: center;
}
/* ---------------------------------------------------Registration------------------------------------------------------ */

.forgotText {
  margin-top: 25px;
}
.forgotPasswordCss {
  justify-content: center;
  margin-top: 197px;
  margin: auto;
  text-align: center;
}
.forgotcard {
  justify-content: center;
  width: 323px;
  margin-top: 167px;
  border: 1px solid #f5f5f5;
  margin: auto;
  height: auto;
}
---------------------------------------------------Forgot------------------------------------------------------
---------------------------------card---------------------------------------------------------------------------
/******************************************************************************
* @Purpose : FUNDOO
* @file : card.js
* @overview : Fundoo FrontEnd
* @author : BISATI SAI VENKATA VIKAS
* @version : v8.15.0
* @since : 26/09/2019
******************************************************************************/
import React from 'react';
import AppBar from '@material-ui/core/AppBar';
import { Toolbar, Typography, Card, Button } from '@material-ui/core';
import { service } from '../services/userService';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogTitle from '@material-ui/core/DialogTitle';
export default class CardComponent extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            open: false,
            serviceData: [],
            openSnackBar: false,
            SnackBarMessage: ""
        }
    }
    handleLogin = () => {
        this.props.history.push('/login')
    }
    handleDialog = () => {
        this.setState({
            open: !this.state.open
        })
    }
    handleClose = () => {
        this.setState({
            open: false
        });
    }
    handleProceed = () => {
        this.props.history.push('/registration')
    }
    componentWillMount() {
        service()
            .then(response => {
                console.log('Response from service', response);
                this.setState({
                    serviceData: response.data.data.data
                })
                console.log(this.state.serviceData)
            })
    }
    render() {
        const ser = this.state.serviceData.map((object, index) => {
            console.log('index is --------', index)
            if (index === 0) {
                return (
                    <div>
                        <p style={{ paddingRight: "50px" }}><b>Price : $ {object.price} per month</b></p>
                        <p><span style={{ color: "blue" }}>{object.name}</span></p>

                        <ul>
                            <li style={{ padding: '-1px' }}>
                                ${object.price}/month
                            </li>
                            <li>
                                {object.description}
                            </li>
                        </ul>
                    </div>
                )
            } else {
                return true;;
            }
        })
        const sers = this.state.serviceData.map((object, index) => {
            if (index === 1) {
                return (
                    <div>
                        <p style={{ paddingRight: "50px" }}><b>Price : $ {object.price} per month</b></p>
                        <p ><span style={{ color: "blue" }}>{object.name}</span></p>
                        <ul>
                            <li>${object.price}/month</li>
                            <li>{object.description}</li>
                        </ul>

                    </div>
                )
            }
            else {
                return true;
            }                                                
        })
        return (this.state.notes;
        // console.log("trashnotes id is ",delId);  
        // console.log("new array is ",newArr);
        // console.log('yes or not',newArr[0].id==="5d88951ca0a6a900185be37c");
        // newArr[37].isDeleted=true;
            <div>
                <div >
                    <AppBar position="static">
                        <Toolbar>
                            <Typography variant="h6">
                                FundooNotes
                        </Typography>
                        </Toolbar>
                    </AppBar>
                    <div>
                        <p id="cardText"><b>FundooNotes offered. Choose below service to register.</b></p>
                    </div>
                    <div className="cards">
                        <div className="cardDiv1">
                            <Card className="cardsInCard1" onClick={this.handleDialog}>
                                <div >
                                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby="form-dialog-title">
                                        <DialogTitle>Advance Pack Details</DialogTitle>
                                        <DialogActions>

                                            <Button onClick={this.handleClose} color="primary">
                                                Remove
                                                </Button>
                                            <Button onClick={this.handleProceed} color="primary">
                                                Proceed To Checkout
                                            </Button>
                                        </DialogActions>
                                    </Dialog>
                                    <h5 style={{ marginLeft: "50px", marginTop: "235px" }}>ADD TO CART</h5>
                                </div>
                            </Card>
                            <Card className="cardsInCard2" onClick={this.handleDialog}>
                                <div>
                                    {ser}
                                </div>
                            </Card>
                        </div>
                        <div className="cardDiv2" >
                            <Card className="cardsInCard1" onClick={this.handleDialog} >
                                <div>
                                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby="form-dialog-title">
                                        <DialogTitle style={{ textAlign: "center" }}>Advance Pack Details</DialogTitle>
                                        <DialogActions>
                                            <Button onClick={this.handleClose} color="primary">
                                                Remove
                                                </Button>
                                            <Button onClick={this.handleProceed} color="primary">
                                                Proceed To Checkout
                                            </Button>
                                        </DialogActions>
                                    </Dialog>
                                    <h5 style={{ marginLeft: "50px", marginTop: "235px" }}>ADD TO CART</h5>
                                </div>
                            </Card>
                            <Card className="cardsInCard2" onClick={this.handleDialog} >
                                <div >
                                    {sers}
                                </div>
                            </Card>
                        </div>
                        <div className="serviceButton">
                            <Button color="primary" id="sensitivityCard" onClick={this.handleLogin}>
                                Sign in instead
                         </Button>
                        </div>
                    </div>
                </div>
            </div>
        )
    }
}

---------------------------------------------------css-------------------------------------------------------------
#sensitivity {
  text-transform: none;
}

/* ----------------------------------------------------------------------------------------------------- */

.container {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.cards {
  display: flex;
  width: 100%;
  line-height: 2rem;
  justify-content: center;
}

.outerCard {
  width: 97%;
  margin-left: -5%;
  margin-top: -20%;
  height: 214px;
}

.innerCard {
  width: 42%;
  height: 100%;
}

#orange {
  background-color: orange;
}

#orange:hover {
  transition: width 1s;
  transition: height 1s;
  width: 50%;
  height: 100%
}

.keyDetails1 {
  display: flex;
  margin-top: 9%;
  justify-content: center;
}

.keyDetails2 {
  display: flex;
  margin-top: 9%;
  width: 100%;
  justify-content: center;
}

.fundooNotes {
  margin-left: 80px;
  font-size: 30px;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  font-weight: normal;
}

.serviceLogin {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 230px;
}

.dialogButton {
  display: flex;
  width: 100%;
  justify-content: space-between;
}

/* -----------------------------------------------------Reg------------------------------------------------------------- */

.register-page {
  width: 100%;
  display: flex;
  justify-content: center;
}

.registrationFields {
  display: flex;
  align-items: center;
  justify-content: center;
}

.register-container {
  width: 68%;
  display: flex;
  flex-direction: column;
  /* align-items: center; */
  justify-content: center;
  height: 100%;
}

.register-card {
  /* padding-top: 5%; */
  display: flex;
  width: 100%;
  height: 900px;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
}

.register-fields1 {
  display: flex;
  justify-content: space-around;
  margin-bottom: 25px;
}

.register-fields2 {
  display: flex;
  padding-left: 100px;
  padding-right: 100px;
  flex-direction: column;
  margin-bottom: 25px;
}

.register-fields3 {
  display: flex;
  justify-content: space-around;
}

.register-heading {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
}

/* -------------------------------------------------forgot------------------------------------------------------------- */

.forgot-container {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.forgot-card {
  display: flex;
  align-items: center;
  flex-direction: column;
  height: 500px;
  width: 450px;
  justify-content: center;
}

.forgot-form {
  display: flex;
  align-items: center;
  justify-content: center;
}

.forgot-buttons {
  display: flex;
  justify-content: space-evenly;
}

/* -------------------------------------------------login------------------------------------------------------------- */

.login-container {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.login-form {
  display: flex;
  align-items: center;
  justify-content: center;
}

.login-card1 {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 550px;
  width: 450px;
  flex-direction: column;
}

.login-card2 {
  align-content: center;
  align-items: center;
  height: 550px;
  width: 450px;
}

/* ---------------------------------------------------Dashboard--------------------------------------------------------- */

.dashboard-card1 {
  border: 1px white;
  height: 80px;
  width: 500px;
}

.dashboard-card2 {
  border: 1px solid white;
  height: 160px;
  width: 500px;
}

.dashboard-appbar {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.dashboard-logo {
  display: flex;
  align-items: center;
  flex-direction: row;
  flex: 0.2;
}

.dashboard-card-div {
  display: flex;
  flex-direction: row;
  flex: 0.7;
  justify-content: space-between;
  background-color: #f0f0f0;
  border-radius: 1em;
  align-items: center;
}

.dashboard-container {
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
  padding-bottom: 7%;
}

.dashboard-refresh {
  display: flex;
  flex-direction: row;
}

.before {
  transition: 0.25s;
}

.after {
  margin-left: 50px;
  transition: margin-left 0.25s;
}

/* ------------------------------------------------------CreateNotes----------------------------------------------------- */

.create-container {
  display: flex;
  justify-content: center;
  padding-bottom: 3%;
}

.create-card2 {
  width: 600px;
  height: auto;
  border: 1px solid whitesmoke;
  border-radius: 1em;
}

.create-card1 {
  width: 600px;
  height: 46px;
  border: 1px solid whitesmoke;
  border-radius: 1em;
}

.in1 {
  width: 100%;
}

.in2 {
  width: 100%;
}

.in3 {
  width: 100%;
}

.input1 {
  padding-left: 3%;
  padding-top: 2%
}

.input2 {
  padding-left: 3%;
  padding-top: 2%
}

.notes-icons {
  display: flex;
  justify-content: space-between;
  padding-left: 3%;
  padding-top: 2%
}

.notes-icon-div {
  display: flex;
  justify-content: space-between;
  width: 40%;
}

/* ------------------------------------------------getNotes--------------------------------------------------------------- */

.get-card1 {
  min-width: auto;
  min-height: auto;
  border: 1px solid whitesmoke;
  border-radius: 1em;
}

.get-card1:hover .notes-icon-div1 {
  visibility: visible;
}

.get-card2 {
  min-width: 40vw;
  min-height: auto;
  border: 1px solid whitesmoke;
}

.get-ca rd2:hover .notes-icon-div2 {
  visibility: visible;
}

.notes-icon-div1 {
  display: flex;
  justify-content: space-between;
  visibility: hidden;
}

.notes-icon-div2 {
  display: flex;
  min-width: 40vw;
  visibility: visible;
  justify-content: space-around;
}

.get-in1 {
  width: auto;
}

.get-in2 {
  width: auto;
}

.get-container {
  width: 60%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  /* flex-direction: column; */
  flex-wrap: wrap;
}

.get-page {
  width: 100%;
  display: flex;
  /* flex-wrap: wrap; */
  justify-content: center;
}

.get-contents {
  padding-bottom: 3%;
}
/* ------------------------------------------------------Drawer------------------------------------------------------------ */

.drawer-container {
  display: flex;
  align-items: center;
}

.drawer-css {
  width: 32%;
  transition: 0.4s;
}

#note {
  border-top-right-radius: 50px 50px;
  border-bottom-right-radius: 50px 50px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* --------------------------------------------------------------colorpalette------------------------------------------------ */

.color-styles {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
}

.colorpalette-card {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  justify-content: space-between;
  position: fixed;
  width: 9%;
  height: 10%;
}

/* ----------------------------------------------card---------------------------------------------------------------------- */

.card-container {
  display: flex;
  background-color: orange;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  height: 10vh;
}

.middle-card {
  width: 80%;
  height: 80vh;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.main-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100vh;
}

.first-card {
  width: 20%;
  height: 40vh;
  border: 1px solid black;
  box-shadow: 15px 15px grey;
  transition: transform .2s;
}

.first-card:hover {
  height: 200px;
  transform: scale(1.5);
  box-shadow: 15px 15px orange;
}

.second-card:hover {
  height: 200px;
  transform: scale(1.5);
  box-shadow: 15px 15px orange;
}

.second-card {
  width: 20%;
  height: 40vh;
  border: 1px solid black;
  box-shadow: 15px 15px grey;
  /* transition: width 1s;
  transition: height 1s; */
  transition: transform .2s;
}
        // console.log("note in delUp",this.state.notes);         
        // var delId=trashNoteId;
        // var newArr=this.state.notes;
        // console.log("trashnotes id is ",delId);  
        // console.log("new array is ",newArr);
        // console.log('yes or not',newArr[0].id==="5d88951ca0a6a900185be37c");
        // newArr[37].isDeleted=true;
        // for(let i=0;i<newArr.length;i++){
        //     console.log("yes entered");
        //     if(newArr[i].id===delId){
        //         console.log("yes ",delId);
        //         newArr[i].isDeleted=true;
        //         newArr[i].isArchived=false;
        //         newArr[i].isPinned=false;
        //     }
        // }
        // this.setState({
        //     notes:newArr
        // })
            componentWillMount() {
        const mediaQuery = window.matchMedia(`(max-width: 360px)`)
        if (mediaQuery.matches) {
            this.setState({
                miniSearch: true
            })

        }
        else {
            this.setState({
                miniSearch: false
            })
        }
        mediaQuery.addListener((media) => {
            if (media.matches) {
                this.setState({
                    miniSearch: true
                })
            }
            else {
                this.setState({
                    miniSearch: false
                })
            }
        })
    }
        handleMini = () => {
        this.setState({
            miniOpen:!this.state.miniOpen
        })
    }
    handleBack=()=>{

    }
                             {this.state.miniSearch ?
                                            <ClickAwayListener onClickAway={this.handleClose}>
                                                <IconButton>
                                                    <Tooltip title="search">
                                                        <SearchIcon onClick={this.handleMini} />
                                                    </Tooltip>
                                                </IconButton>
                                                {this.state.miniOpen ?
                                                    <div className="dashboard-card-div1" 
                                                    style={{ backgroundColor: "#FFFAF0" }}>
                                                        <IconButton>
                                                            <Tooltip title="Back">
                                                                <ArrowBackIcon onClick={this.handleBack}/>
                                                            </Tooltip>
                                                        </IconButton>
                                                        <InputBase style={{ width: "100%" }}
                                                            autoComplete="off" placeholder="Search"
                                                            onClick={this.handleSearchClick}
                                                            // onKeyDown={this.handleKeyDown}
                                                            value={this.state.searchText}
                                                            onChange={this.handleSearchText}
                                                        />
                                                        {this.state.clr ? (
                                                            <IconButton>
                                                                <ClearOutlinedIcon onClick={this.handleClearText} />
                                                            </IconButton>
                                                        ) : (null)}
                                                    </div> : (null)}
















-------------

import React, { Component } from 'react'
import { Card, InputBase, Tooltip, Button } from '@material-ui/core';
import AddAlertOutlinedIcon from '@material-ui/icons/AddAlertOutlined';
import ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';
import ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined';
import PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';
import MoreVertOutlinedIcon from '@material-ui/icons/MoreVertOutlined';
import { addNotes } from '../services/userService';
import ColorPaletteComponent from './colorPaletteComponent';
import DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';
import Checkbox from '@material-ui/core/Checkbox';
export default class createNotes extends Component {
    constructor(props) {
        super(props);
        this.state = {
            noteClick: false,
            title: '',
            desc: '',
            note: {},
            color: '',
            checkedState: false,
            list: '',
            checkList: [],
            currentItem: {
                text: '',
                key: ''
            }
        }
        this.inputRef = React.createRef();
    }
    // handleClickAway = () => {
    //     var data = {
    //         title: this.state.title,
    //         description: this.state.desc,
    //         color: this.state.color,
    //         isArchived: this.state.archive
    //     }
    //     console.log("create notes data", data)
    //     addNotes(data).then((res) => {
    //         console.log(res);
    //         this.setState({
    //             note: res.data.status.details
    //         });
    //         this.props.getNew(this.state.note)
    //         this.setState({
    //             noteClick: false,
    //             title: '',
    //             desc: '',
    //             color:''
    //         })
    //     }).catch((err) => {
    //         console.log(err);
    //     })
    //     this.setState({
    //         noteClick: false,
    //         title: '',
    //         desc: ''
    //     })
    // }
    componentDidMount() {
        this.inputRef.current.focus()
        console.log("this.input current", this.inputRef);
    }
    handleCards = () => {
        this.setState({
            noteClick: true
        })
    }
    handleTitle = (e) => {
        var title = e.target.value;
        this.setState({
            title: title
        })
    }
    handleDescription = (e) => {
        var desc = e.target.value;
        this.setState({
            desc: desc
        })
    }
    handleList = (e) => {
        this.setState({
            currentItem: {
                text: e.target.value,
                key: Date.now()
            }
        })
    }
    handleClose = () => {
        this.setState({
            noteClick: false,
            title: '',
            description: ''
        })
        var data = {
            title: this.state.title,
            description: this.state.desc,
            color: this.state.color,
            isArchived: this.state.archive
        }
        console.log("create notes data", data)
        addNotes(data).then((res) => {
            console.log(res);
            this.setState({
                note: res.data.status.details
            });
            this.props.getNew(this.state.note)
            this.setState({
                noteClick: false,
                title: '',
                desc: '',
                color: ''
            })
        }).catch((err) => {
            console.log(err);
        })

    }
    handleColor = async (col) => {
        console.log('col', col);
        await this.setState({
            color: col
        })
    }
    // handleEnter=(e)=>{
    //     if(e.key==='Enter'){
    //         e.preventDefault();
    //         this.handleClose();
    //         onKeyPresss={()=>this.handleEnter}
    //     }
    // }
    handleCheckBox = () => {
        console.log("triggered");
        this.setState({
            checkedState: !this.state.checkedState
        })

    }

    handleCheckClose = () => {
        this.setState({
            noteClick: false,
            checkedState: false
        })
        const addCheckList = this.state.checkList.map(data => {
            return data.text
        })
        console.log("add check list is ", addCheckList);

        // var data = {
        //     title: this.state.title,
        //     isArchived: this.state.archive,
        //     color: this.state.color,
        //     noteCheckLists: addCheckList,
        // }
        console.log("title", this.state.title);

        var data = new FormData();
        data.append('title', this.state.title);
        data.append('isArchived', this.state.archive);
        data.append('color', this.state.color);
        data.append('noteCheckLists', addCheckList);
        for (var pair of data.entries()) {
            console.log("data in form data", pair[0] + ', ' + pair[1]);
        }

        addNotes(data).then((res) => {
            console.log(res);
            this.setState({
                note: res.data.status.details
            });
            this.props.getNew(this.state.note)
            this.setState({
                noteClick: false,
                title: '',
                desc: '',
                color: ''
            })
        }).catch((err) => {
            console.log(err);
        })
        this.setState({
            title: '',
        })
    }

    handleAddItem = (e) => {
        e.preventDefault();
        const newItem = this.state.currentItem;
        if (newItem.text !== '') {
            const newItems = [...this.state.checkList, newItem];
            this.setState({
                checkList: newItems,
                currentItem: {
                    text: '',
                    key: ''
                }
            })
        }
    }

    handleDeleteItem = (keyId) => {
        const filteredItems = this.state.checkList.filter((data) => {
            return data.key !== keyId
        })
        this.setState({
            checkList: filteredItems
        })
    }

    handleUpdateItem = (text, keyId) => {
        const updatedItems = this.state.checkList;
        updatedItems.map(item => {
            if (item.key === keyId) {
                item.text = text
            }
        })
        this.setState({
            checkList: updatedItems
        })
    }

    render() {
        return (
            <div className="create-container">
                {this.state.noteClick ? (
                    <Card className="create-card2" style={{ boxShadow: "0 8px 16px 0 rgba(0,0,0,0.2)", backgroundColor: this.state.color }} >
                        <div className="input1">
                            <InputBase className="in2"
                                multiline
                                placeholder="Title"
                                id="title"
                                style={{ width: "100%" }}
                                onChange={this.handleTitle}
                                value={this.state.title}
                            />
                        </div>
                        <div className="input2">
                            <InputBase className="in3"
                                multiline
                                placeholder="Take a note ...."
                                style={{ width: "100%" }}
                                id="description"
                                onChange={this.handleDescription}
                                value={this.state.desc}
                            />
                        </div>
                        <div className="notes-icons">
                            <div className="notes-icon-div">
                                <Tooltip title="Remind me">
                                    <AddAlertOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="collaborator">
                                    <PersonAddOutlinedIcon />
                                </Tooltip>
                                <ColorPaletteComponent
                                    paletteProps={this.handleColor}
                                    notesId={""}
                                />
                                <Tooltip title="Add image">
                                    <ImageOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="Archive">
                                    <ArchiveOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="More">
                                    <MoreVertOutlinedIcon />
                                </Tooltip>
                            </div>
                            <div>
                                <Button onClick={this.handleClose}>
                                    close
                                </Button>
                            </div>
                        </div>
                    </Card>
                ) : (
                        (null)
                    )
                }
                {this.state.checkedState && !this.state.noteClick ?
                    <Card className="create-card2"
                        style={{ boxShadow: "0 8px 16px 0 rgba(0,0,0,0.2)", backgroundColor: this.state.color }} >
                        <div className="input1">
                            <InputBase className="in2"
                                multiline
                                placeholder="Title"
                                id="title"
                                style={{ width: "100%" }}
                                onChange={this.handleTitle}
                                value={this.state.title}
                            />
                        </div>
                        {this.state.checkList.map(data => {
                            return (
                                <div className="check-map">
                                    <InputBase className="in3"
                                        multiline
                                        value={data.text}
                                        style={{ width: "100%" }}
                                        onChange={(e) => this.handleUpdateItem(e.target.value, data.key)}
                                    />
                                    <DeleteOutlineIcon onClick={() => this.handleDeleteItem(data.key)} />
                                </div>
                            )
                        })}
                        <hr style={{ margin: "0" }} />
                        <div className="check-input2">
                            <span style={{ color: "gray" }}>+</span>
                            <InputBase className="in3"
                                multiline
                                placeholder="List item"
                                id="description"
                                onChange={this.handleList}
                                style={{ width: "100%" }}
                                value={this.state.currentItem.text}
                            />
                            <Button onClick={this.handleAddItem}>AddItem</Button>
                        </div>
                        <hr style={{ margin: "0" }} />
                        <div className="notes-icons">
                            <div className="notes-icon-div">
                                <Tooltip title="Remind me">
                                    <AddAlertOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="collaborator">
                                    <PersonAddOutlinedIcon />
                                </Tooltip>
                                <ColorPaletteComponent
                                    paletteProps={this.handleColor}
                                    notesId={""}
                                />
                                <Tooltip title="Add image">
                                    <ImageOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="Archive">
                                    <ArchiveOutlinedIcon />
                                </Tooltip>
                                <Tooltip title="More">
                                    <MoreVertOutlinedIcon />
                                </Tooltip>
                            </div>
                            <div>
                                <Button onClick={this.handleCheckClose}>
                                    close
                            </Button>
                            </div>
                        </div>
                    </Card> : (
                        !this.state.noteClick ?
                            <div>
                                <Card className="create-card1" onClick={this.handleNoteClick}
                                    style={{ boxShadow: "0 8px 16px 0 rgba(0,0,0,0.2)" }}>
                                    <div className="input2" style={{ width: "100%" }}>
                                        <InputBase className="in1"
                                            multiline
                                            placeholder="Take a note ...."
                                            id="description"
                                            ref={this.inputRef}
                                            style={{ width: "100%" }}
                                            onChange={this.handleDescription}
                                            onClick={this.handleCards}
                                            value={this.state.desc}
                                        />
                                    </div>
                                    <div>
                                        <Checkbox
                                            checked
                                            color="White"
                                            onChange={this.handleCheckBox}
                                        />
                                    </div>
                                </Card>
                            </div> :
                            (null))}
            </div>
        )
    }
}